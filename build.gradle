/*
 *  Copyright (c) 2022 - Thoughtworks Inc. All rights reserved.
 */

plugins {
    id("io.micronaut.library") version "3.6.6"
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id "java"
    id "application"
    id "org.owasp.dependencycheck" version "7.3.0"
    id "com.github.ben-manes.versions" version "0.44.0"
    id 'jacoco'
    id 'com.google.cloud.tools.jib' version '3.3.1'
    id "org.sonarqube" version "3.3"
}

apply plugin: "java"
apply plugin: "application"
apply plugin: 'jacoco'

version = "0.1"
group = "com.xact"
compileJava.options.compilerArgs += '-parameters'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.velocity:velocity:1.7'
    implementation 'org.apache.velocity:velocity-tools:2.0'
    implementation 'io.projectreactor:reactor-core:3.5.1'
    compileOnly "io.micronaut:micronaut-aop:3.7.4"
    compileOnly "org.projectlombok:lombok:1.18.24"
    compileOnly "com.google.code.findbugs:jsr305"
    annotationProcessor "org.projectlombok:lombok:1.18.24"
    annotationProcessor "io.micronaut.openapi:micronaut-openapi:4.8.0"

    compileOnly("io.swagger.core.v3:swagger-annotations")
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-http-server-netty")

    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    runtimeOnly("com.h2database:h2")
    runtimeOnly("org.postgresql:postgresql")
    implementation("io.micronaut.flyway:micronaut-flyway")


    implementation("io.micronaut.security:micronaut-security-oauth2")
    implementation("io.micronaut.security:micronaut-security-jwt")

    implementation 'org.modelmapper:modelmapper:3.1.1'
    implementation 'org.apache.poi:poi:5.2.3'
    implementation 'org.apache.poi:poi-ooxml:5.2.3'
    implementation 'jfree:jfreechart:1.0.13'

    runtimeOnly("ch.qos.logback:logback-classic")

    testImplementation("org.mockito:mockito-all:1.10.19")
    testImplementation("org.hamcrest:hamcrest-library:2.2")
    testImplementation("io.reactivex:rxjava:1.3.8")
    testImplementation("io.reactivex.rxjava3:rxjava:3.1.5")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"


}

test {
    useJUnitPlatform()
}


java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

micronaut {
    runtime "netty"
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.xact.*")
    }
}


tasks.named("assemble") {
    dependsOn(":shadowJar")
}

shadowJar {
    zip64 = true
}

test {
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    reports {
        xml.required = true
    }
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com/xact/assessment/Application.class', 'com/xact/assessment/models/Rating.class', 'com/xact/assessment/exceptions/GlobalErrorResponseProcessor.class'])
        }))
    }
}

check.dependsOn jacocoTestCoverageVerification

mainClassName = "com.xact.assessment.Application"

jar {
    manifest {
        attributes "Main-Class": mainClassName
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com/xact/assessment/Application.class', 'com/xact/assessment/models/Rating.class', 'com/xact/assessment/exceptions/GlobalErrorResponseProcessor.class'])
        }))
    }
    violationRules {
        rule {
            limit {
                minimum = 0.90
            }
        }
    }
}
